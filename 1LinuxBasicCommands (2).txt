RPM and YUM Package Managers
****************************

 - rpm -ivh *name.rpm :- to install package
 - rpm -e :- to uninstall
 - rpm -Uvh :- to upgrade
 - rpm -q :- to query 
 - rpm -Vf *path to package :- to verify
							*Unlike RPM, YUM handles package dependencies very well.
							 repository information is stored in /etc/yum.repos.d/ and
							 repository files will have the .repo extension.

 - yum install :- to install
 - yum update :- to update all packages 
 - yum repolist :- To list all the repos added to your system
 - yum provides :-  To check which package should be installed for specific command to work
 - yum remove :- To remove a package
 
DPKG and APT Package Managers
*****************************
 
- dpkf -i :- to install or update
       -r :- to uninstall
	 -l :- To list all packages 
	 -s :- to check the status of the package if installed
	 -p :- to display the info of package 


- apt install or apt-get install :- to install            *software repository for APT is defined in /etc/apt/sources.list file.
- apt update :- To refresh a repository
- apt upgrade:- To install available upgrades of all packages currently installed on the system from the sources configured.
- apt remove :- To remove the package
- apt search :- To search for a package in the repository
- apt list :- To list all the available packages
- apt edit-sources :- to update repo using any editor


*************************************************************************************************************************
 
- du :- Viewing file sizes
    -sh :-  shows the size of a file or directory in human readable format
or
- ls -lh :- 

------------------------------------------------------------------------------

 Archiving Files
------------------

 - tar -cf *name.tar __ :-  -c to create an archive and the -f is used to specify the name of the tar file to be created. 
				These is followed by files or directories to be archive.

     - tar -tf :- -tf option followed by the tar filename is used to see the contents of the tarball.
     - tar -xf :- to extract the contents from the tarball.
     - tar -zcf :- to compress the tarball to reduce its size.

Compression
-----------
   To compress files

 - bzip2 (*filename.bz2 extension)

 - gzip (.gz extension)

 - xz (.xz extension)
  
   To uncompress

 - bunzip2

 - gunzip

 - unxz
 
 To read without an uncompress

 - zcat , bzcat and xzcat

*******************************************************************************************************************

Searching for files and Patterns
--------------------------------

 - locate *filename :- this shows all paths matching the pattern
										*The downside of the locate command is it depends on a database called mlocate.db for querying the filename.

 - updatedb :- To manually update the DB

 - find <path> -name *name :- To search file by a name
 
 - grep :- To search within files
    
	-i :- for case-insensitive
	-r :- To search for a pattern recursively
	-v :- To print the lines that don't matches the pattern
	-w :- To search for the whole word
	-vw :- reverse the search and print all lines of the same file that doesn't match the whole word
	-A1 :- To print the 1 lines below
	-B*number :- To print the number of lines above
							*can use -A -B together

*******************************************************************************************************************
 
With IO Redirection, the STDIN, STDOUT and STDERROR can be redirected to a text file
----------------------------------------------------------------------------------
eg :- 
	echo $SHELL > shell.txt :- To redirect STDOUT to a file instead of printing it on the screen.
	echo $SHELL >> shell.txt :- To append STDOUT to an exisiting file

	cat missing_file 2> error.txt :- To redirect just the ERROR message
	cat missing_file 2>> error.txt :- To append the STDERR to the exisiting file

	cat missing_file 2> /dev/null :- to execute and not print ERROR messages on the screen even if it generates a standard ERROR

*******************************************************************************************************************

Command Line Pipes ( | )
------------------
 *Pipes allow the linking of multiple commands

 eg:- grep Hello sample.txt | less 

	echo $SHELL | tee shell.txt :- Instead of the redirect operator, we can use the command line pipe (|) followed by tee command.
	echo "This is the bash shell" | tee -a :- to append instead of overwritting it

*******************************************************************************************************************

Vim Editor
----------

VI EDITOR has three operation modes.

1.Command Mode

- When the vi editor opens a file, it always goes to the COMMAND MODE first.
- In this mode, the editor only understands the commands

2.Insert Mode

- To switch from command mode to INSERT MODE type lower case i
- This mode allows you to write text into the file.
- Once you are done with editing the file, to go back to command mode hit the ESC button.
- While going into insert mode from command mode you may use other options such as I, o, O, a, or A

3.Last Line Mode

- Pressing the : key will take you to the LAST LINE MODE
- In this mode you can choose to save changes to the file, discard changes, or save and edit.
- From the last line mode hit the ESC key to go back to the command mode.


 - yy :- to copy aline
 - p :- to paste
 - x :- to delete letter
 - dd :- to delete a line
 - d2d :- to delete 2 lines
 - u :- to undo
 - r :- to redo
 - /*keyword :- to find downwards
 - ?* :- to find upwards 
 - n :- moves downwards to find the next match
 - N :- it searches for the pattern from the cursor and moves upwards to find the next match

 -ZZ :- to save and exit
